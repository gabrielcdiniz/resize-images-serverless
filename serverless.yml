service: resize-images-otf-TESTING-2

plugins:
  - serverless-plugin-typescript
  - serverless-offline

custom:
  policy_version: "2012-10-17"
  settings: ${file(./resources/config/${opt:stage, 'dev'}.yml)}

provider:
  name: aws
  runtime: nodejs14.x
  memorySize: 1024
  timeout: 10
  logRetentionInDays: 7
  region: ${opt:region, 'us-west-2'}
  stage: ${opt:stage, 'dev'}

  # apiGateway:
  #   restApiId:
  #     Fn::ImportValue: postsapi-${opt:stage}-RestApiId
  #   restApiRootResourceId:
  #     Fn::ImportValue: postsapi-${opt:stage}-RootResourceId

  environment:
    S3_BUCKET: ${self:custom.settings.S3_BUCKET}

functions:
  resizeImageOTF:
    handler: src/handler.handler
    name: ${self:service}-${opt:stage, self:provider.stage}
    events:
      - http:
          path: /{proxy+}
          method: get

resources:
  Resources:
    S3Bucket:
      Type: "AWS::S3::Bucket"
      Properties:
        AccessControl: PublicRead
        BucketName: ${self:custom.settings.S3_BUCKET}
        CorsConfiguration:
          CorsRules:
            - AllowedOrigins:
                - "*" # TODO: definir quais endpoints
              AllowedHeaders:
                - "*"
              AllowedMethods:
                - GET
                - PUT
                - HEAD
              MaxAge: 84600
        WebsiteConfiguration:
          IndexDocument: index.html
          # ErrorDocument: error.html # (Optional)
          RoutingRules:
            - RoutingRuleCondition:
                HttpErrorCodeReturnedEquals: "404"
              RedirectRule:
                HttpRedirectCode: "307"
                Protocol: https
                ReplaceKeyPrefixWith: ${self:provider.stage}/${self:service}?path=
                HostName:
                  Fn::Join:
                    - "."
                    - - !Ref ApiGatewayRestApi
                      - "execute-api"
                      - !Ref "AWS::Region"
                      - "amazonaws.com"

    S3BucketPolicy: 
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket: !Ref S3Bucket
        PolicyDocument:
          Version: ${self:custom.policy_version}
          Statement:
            - Action:
                - "s3:GetObject"
              Effect: Allow
              Resource: !Join
                - ""
                - - "arn:aws:s3:::"
                  - !Ref S3Bucket
                  - /*
              Principal: "*"

    # ApplicationRole:
    #   Type: AWS::IAM::Role
    #   Properties:
    #     RoleName: ApplicationRole # required if you want to use 'serverless deploy --function' later on
    #     AssumeRolePolicyDocument:
    #       Version: ${self:custom.policy_version}
    #       Statement:
    #         - Effect: Allow
    #           Principal:
    #             Service:
    #               - lambda.amazonaws.com
    #           Action: sts:AssumeRole

    #     # Pattern: Service-Name:(Allow|Deny):Action-Type
    #     Policies:
    #       - PolicyName: "S3:Allow:PutObject"
    #         PolicyDocument:
    #           Version: ${self:custom.policy_version}
    #           Statement:
    #             - Effect: "Allow"
    #               Action:
    #                 - "s3:PutObject"
    #               Resource: !Join
    #                 - ""
    #                 - - "arn:aws:s3:::"
    #                   - !Ref "ServerlessDeploymentBucket"

    #       - PolicyName: "CloudWatch:Allow:CreateLogs"
    #         PolicyDocument:
    #           Version: "2012-10-17"
    #           Statement:
    #             - Effect: Allow # note that these rights are given in the default policy and are required if you want logs out of your lambda(s)
    #               Action:
    #                 - logs:CreateLogGroup
    #                 - logs:CreateLogStream
    #                 - logs:PutLogEvents
    #               Resource:
    #                 - !Join
    #                   - ":"
    #                   - - "arn:aws:logs"
    #                     - !Ref "AWS::Region"
    #                     - !Ref "AWS::AccountId"
    #                     - "log-group:/aws/lambda/*:*:*"

  Outputs:
    WebsiteURL:
      Value: !GetAtt S3Bucket.WebsiteURL
      Description: URL for website hosted on S3

    S3BucketSecureURL:
      Value: !Join
        - ""
        - - "https://"
          - !GetAtt S3Bucket.DomainName
      Description: Name of S3 bucket to hold website content
