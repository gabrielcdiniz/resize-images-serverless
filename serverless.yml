service: resize-images-otf-TESTING-2

plugins:
  - serverless-plugin-typescript
  - serverless-offline

custom:
  policy_version: "2012-10-17"
  settings: ${file(./resources/config/${opt:stage, 'dev'}.yml)}

provider:
  name: aws
  runtime: nodejs14.x
  memorySize: 1024
  timeout: 10
  logRetentionInDays: 7
  region: ${opt:region, 'us-west-2'}
  stage: ${opt:stage, 'dev'}
  iamRoleStatements:
    - Effect: Allow # note that these rights are given in the default policy and are required if you want logs out of your lambda(s)
      Action:
        - logs:CreateLogGroup
        - logs:CreateLogStream
        - logs:PutLogEvents
      Resource:
        Fn::Join:
          - ":"
          - - "arn:aws:logs"
            - !Ref "AWS::Region"
            - !Ref "AWS::AccountId"
            - "log-group:/aws/lambda/*:*:*"

    - Effect: "Allow"
      Action:
        - "s3:PutObject"
        - "s3:GetObject"
        - "s3:ListObjects"
        - "s3:ListBuckets"
        - "s3:GetBucketPolicy"
        - "s3:GetBucketWebsite"
      Resource:
        Fn::Join:
          - ""
          - - "arn:aws:s3:::"
            - "${self:custom.settings.S3_BUCKET}"
            - "/*"

  environment:
    BUCKET: ${self:custom.settings.S3_BUCKET}
    URL: !GetAtt S3Bucket.WebsiteURL

functions:
  resizeImageOTF:
    handler: src/handler.handler
    name: ${self:service}-${opt:stage, self:provider.stage}
    events:
      - http:
          path: /{proxy+}
          method: get

# package:
#   exclude:
#     - resources/**
#     - node_modules/aws-sdk/**

#   include:
#     - src/**
#     - node_modules/sharp/**

resources:
  Resources:
    S3Bucket:
      Type: "AWS::S3::Bucket"
      Properties:
        AccessControl: PublicRead
        BucketName: ${self:custom.settings.S3_BUCKET}
        CorsConfiguration:
          CorsRules:
            - AllowedOrigins:
                - "*" # TODO: definir quais endpoints
              AllowedHeaders:
                - "*"
              AllowedMethods:
                - GET
                - PUT
                - HEAD
              MaxAge: 84600
        WebsiteConfiguration:
          IndexDocument: index.html
          # ErrorDocument: error.html # (Optional)
          RoutingRules:
            - RoutingRuleCondition:
                HttpErrorCodeReturnedEquals: "404"
              RedirectRule:
                HttpRedirectCode: "307"
                Protocol: https
                ReplaceKeyPrefixWith: ${self:provider.stage}/${self:service}?path=
                HostName:
                  Fn::Join:
                    - "."
                    - - !Ref ApiGatewayRestApi
                      - "execute-api"
                      - !Ref "AWS::Region"
                      - "amazonaws.com"

    S3BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket: !Ref S3Bucket
        PolicyDocument:
          Version: ${self:custom.policy_version}
          Statement:
            - Action:
                - "s3:GetObject"
              Effect: Allow
              Resource: !Join
                - ""
                - - "arn:aws:s3:::"
                  - !Ref S3Bucket
                  - /*
              Principal: "*"

  Outputs:
    WebsiteURL:
      Value: !GetAtt S3Bucket.WebsiteURL
      Description: URL for website hosted on S3

    S3BucketSecureURL:
      Value: !Join
        - ""
        - - "https://"
          - !GetAtt S3Bucket.DomainName
      Description: Name of S3 bucket to hold website content
